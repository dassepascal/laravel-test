rappel:
model  Property
migration table properties
controller : php artisan make:controller  Admin\\PropertyController -r (resource:create,delelte...)
request : Admin PropertyRequestForm


creation de larelation entre la table property et option relation many_to_many
php artisan make:migration CreateOptionPropertyTable


Authentification 

ajout du middleware dans route
Route::prefix('admin')->name('admin.')->middleware('auth')->group(function () {
    Route::resource('property', AdminPropertyController::class)->except(['show']);
    Route::resource('option', OptionController::class)->except(['show']);
});


Authentification

button deconnecter seulement dans la parti admin.blade.php


Dans Kernel
element "Guest" il faut être deconnecté si on veut acceder à l'élément:
Route::get('/login',[AuthController::class, 'login'])
->middleware('guest')
->name('login');
Route::post('/login', [AuthController::class, 'doLogin'])->name('doLogin');
Route::delete('/logout', [AuthController::class, 'logout'])
->middleware('auth')
->name('logout');

modification du redirect dans RouteServiceProvider : 

public const HOME = '/'; au lieu de  public const HOME = '/home';



image dans admin controller
public function store(PropertyFormRequest $request)
    {
       
        $property = Property::create($request->validated());
        $property->options()->sync($request->input('options'));
        $property->attachFiles($request->validated('pictures'));
        return to_route('admin.property.index')->with('success', 'Le bien a été ajouté avec succés');
        
    }





affichage des images : php artisan storage:link plus dans .env =  APP_URL=http://localhost:8000


on desire afficher 1 seule image dans le card blade la premiere creation d'une methode dans property

public function getPicture(): ?Picture
    {
        return $this->pictures[0] ?? null;
    }

suppression image utilisation de : https://htmx.org/



suppression des images dans le mode admin liste des biens

 public function destroy(Property $property)
    {
        Picture::destroy($property->pictures()->pluck('id'));
      
        $property->delete();
        return to_route('admin.property.index')->with('success', 'Le bien a été supprimé avec succés');
    }


images : creation du fichier la table picture parce que l'on genere plusieurs image on crée un relation 1->n 

redimenssionner les images

composer require spatie/laravel-glide

definir une route 


Route::get('/images/{path}', [ImageController::class, 'show'])->where('path', '.*');

le controller: ImageController 


Securite: 
dans .env on cree GLIDE_KEY: MOT DE PASSE   
dans config : on cree un fichier glide.php
dans tout ce qui est congiguration on se contente de mettre un tableau

<?php 
return [
    'key' => env('GLIDE_KEY'),
];


dans le fichier ImageController 
  public function show(Request $request,Filesystem $filesystem, string $path): StreamedResponse
    {
        SignatureFactory::create(config('glide.key'))->validateRequest(
            $request->path(),
            $request->all()
        );
.....}

description: on lui dit trouve l'index key dans le fichier de configuration glide.php   on lui demand eest ce que tu peux valider les parametres

afin d'éviter les requétes overloading ajout de with('pictures')  dans les fichiers HomrController + PropertyController

public function index(){
        $properties = Property::with('pictures')->orderBy('created_at','desc')->limit(4)->get();
        return view('home',[
            'properties' => $properties
        ]);
    }    


 $query = Property::query()->with('pictures')->orderBy('created_at', 'desc')->with('options');

